<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Administrative operations" xml:space="preserve">
    <value>Opérations administratives</value>
  </data>
  <data name="Approval" xml:space="preserve">
    <value>Approbation</value>
  </data>
  <data name="Approval processing" xml:space="preserve">
    <value>Processus d'approbation</value>
  </data>
  <data name="Approve Operations" xml:space="preserve">
    <value>Approuver les opérations</value>
  </data>
  <data name="Approving transactions" xml:space="preserve">
    <value>Approbation des transactions</value>
  </data>
  <data name="Bank account configuration" xml:space="preserve">
    <value>Configuration du compte bancaire</value>
  </data>
  <data name="Check Report" xml:space="preserve">
    <value>Rapport de vérification</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Entreprise</value>
  </data>
  <data name="Complete documentation" xml:space="preserve">
    <value>Documentation complète</value>
  </data>
  <data name="Credit" xml:space="preserve">
    <value>Crédit</value>
  </data>
  <data name="Credit processing" xml:space="preserve">
    <value>Traitement de crédit</value>
  </data>
  <data name="Customers" xml:space="preserve">
    <value>Les clients</value>
  </data>
  <data name="Finance" xml:space="preserve">
    <value>La finance</value>
  </data>
  <data name="Generate reports" xml:space="preserve">
    <value>Générer des rapports</value>
  </data>
  <data name="Investment" xml:space="preserve">
    <value>Investissement</value>
  </data>
  <data name="Ledger maintenance" xml:space="preserve">
    <value>Maintenance du grand livre</value>
  </data>
  <data name="Limitless Banking Experience." xml:space="preserve">
    <value>Expérience bancaire sans limites.</value>
  </data>
  <data name="Maintain Profiled Customers" xml:space="preserve">
    <value>Maintenir les clients profilés</value>
  </data>
  <data name="Manage Customers" xml:space="preserve">
    <value>Gérer les clients</value>
  </data>
  <data name="Other investments" xml:space="preserve">
    <value>Autres investissements</value>
  </data>
  <data name="Other related operations" xml:space="preserve">
    <value>Autres opérations connexes</value>
  </data>
  <data name="Process Credit" xml:space="preserve">
    <value>Crédit de processus</value>
  </data>
  <data name="Profile Customers" xml:space="preserve">
    <value>Profil Clients</value>
  </data>
  <data name="Reports" xml:space="preserve">
    <value>Rapports</value>
  </data>
  <data name="Retail" xml:space="preserve">
    <value>Vente au détail</value>
  </data>
  <data name="Retail banking" xml:space="preserve">
    <value>La Banque de détail</value>
  </data>
  <data name="Setup bank" xml:space="preserve">
    <value>banque mise en place</value>
  </data>
  <data name="Setup banking entities" xml:space="preserve">
    <value>Configurer des entités bancaires</value>
  </data>
  <data name="Setup Ledger" xml:space="preserve">
    <value>Ledger d'installation</value>
  </data>
  <data name="Start Investment" xml:space="preserve">
    <value>Commencer l'investissement</value>
  </data>
  <data name="Start Operation" xml:space="preserve">
    <value>Commencer l'opération</value>
  </data>
  <data name="The Core Banking 2.0" xml:space="preserve">
    <value>Le noyau bancaire 2.0</value>
  </data>
  <data name="Treasury operations" xml:space="preserve">
    <value>Opérations de trésorerie</value>
  </data>
  <data name="View reports" xml:space="preserve">
    <value>Voir les rapports</value>
  </data>
</root>